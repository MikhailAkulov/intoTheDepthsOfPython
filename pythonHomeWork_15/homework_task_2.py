# –ó–∞–¥–∞–Ω–∏–µ2.
# üìå –í–æ–∑—å–º–∏—Ç–µ –ª—é–±—ã–µ 1-3 –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.
# –î–æ–±–∞–≤—å—Ç–µ –∫ –Ω–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
# –¢–∞–∫–∂–µ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

# –ù–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã ‚Ññ12
import logging
import argparse

logging.basicConfig(filename=f'task_2_result.log', encoding='utf-8', level=logging.INFO)
logger = logging.getLogger(__name__)


class CheckName:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –§–ò–û –Ω–∞ –ø–µ—Ä–≤—É—é –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤."""
    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    def __set__(self, instance, value: str):
        if value and value[0] == value[0].upper() and value.isalpha():
            setattr(instance, self.param_name, value)
        elif value != '':
            msg = '–§–ò–û –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.'
            logger.error(msg)
            raise ValueError(msg)

    def __delete__(self, instance):
        msg = f'–°–≤–æ–π—Å—Ç–≤–æ "{self.param_name}" –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å'
        logger.error(msg)
        raise AttributeError(msg)


class Student:
    """
    –ö–ª–∞—Å—Å –°—Ç—É–¥–µ–Ω—Ç.
    –°–æ–¥–µ—Ä–∂–∏—Ç –§–ò–û, –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞.
    """
    surname = CheckName()
    name = CheckName()
    patronymic = CheckName()

    def __init__(self, surname: str, name: str, patronymic: str):
        import csv
        self.subjects = []
        self.grades = {}
        self.tests = {}
        self.surname = surname
        self.name = name
        self.patronymic = patronymic
        try:
            with open('academic_subjects.csv', 'r', newline='') as f:
                subjects = csv.reader(f, dialect='excel')
                for line in subjects:
                    self.subjects.append(', '.join(line))
        except IOError as e:
            logger.error(e)

    def set_grade(self, subject: str, grade: int):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É."""
        if subject not in self.subjects:
            logger.info('–ü—Ä–µ–¥–º–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ—á–Ω–µ.')
            return
        if grade < 2 or grade > 5:
            logger.info('–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 2 –¥–æ 5.')
            return
        self.grades.setdefault(subject, []).append(grade)

    def set_test_result(self, subject: str, mark: int):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É."""
        if subject not in self.subjects:
            logger.info('–ü—Ä–µ–¥–º–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ—á–Ω–µ.')
            return
        if mark < 0 or mark > 100:
            logger.info('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 100.')
            return
        self.tests.setdefault(subject, []).append(mark)

    def __str__(self):
        import statistics
        tests = ''
        sum1 = 0
        number_of_ratings = 0
        average_grade = 0.0
        for subject, mark in self.tests.items():
            tests = f'{tests}\n{subject}: {statistics.mean(mark)}'
        for _, grade in self.grades.items():
            sum1 += sum(grade)
            number_of_ratings += len(grade)
            average_grade = sum1 / number_of_ratings
        return f'–°—Ç—É–¥–µ–Ω—Ç: {self.surname} {self.name} {self.patronymic}\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏:' \
               f'{tests}\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º: {average_grade}'


def parse_args():
    parser = argparse.ArgumentParser(description='–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤')
    parser.add_argument('-s', '--surname')
    parser.add_argument('-n', '--name')
    parser.add_argument('-p', '--patronymic', default=None)
    arguments = parser.parse_args()
    return Student(arguments.s, arguments.n, arguments.p)


if __name__ == '__main__':
    s1 = Student('Surname', 'Name', 'Patronymic')
    s1.set_grade('Mathematics', 5)
    s1.set_grade('Graphic_arts', 4)
    s1.set_grade('Sopromat', 3)
    s1.set_grade('Termech', 4)
    s1.set_grade('English', 4)
    s1.set_test_result('Mathematics', 78)
    s1.set_test_result('Mathematics', 93)
    s1.set_test_result('Graphic_arts', 82)
    s1.set_test_result('Sopromat', 73)
    s1.set_test_result('Termech', 62)
    s1.set_test_result('English', 69)
    s1.set_test_result('Termech', 81)
    s1.set_test_result('English', 89)
    s1.set_test_result('Sopromat', 84)

    print(s1)
