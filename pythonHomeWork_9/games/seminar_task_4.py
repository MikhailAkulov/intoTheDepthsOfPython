# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
# üìå –°–æ–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º.
# üìå –ü–∞—Ä–∞–º–µ—Ç—Ä - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.

from typing import Callable
from random import randint as r

__all__ = ['try_guess']


def count(param):
    def closure_func(func: Callable) -> Callable[[], None]:
        MIN_NUMBER = 1
        MAX_NUMBER = 100
        MIN_COUNT = 1
        MAX_COUNT = 10

        def wrapper(number, number_attempts, *args, **kwargs):
            for _ in range(param):
                if number < MIN_NUMBER or number > MAX_NUMBER:
                    number = r(1, 100)
                if number_attempts < MIN_COUNT or number_attempts > MAX_COUNT:
                    number_attempts = r(1, 10)
                func(number, number_attempts, *args, **kwargs)
        return wrapper
    return closure_func


@count(2)
def try_guess(number: int, number_attempts: int) -> None:
    print(f'–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –∑–∞ {number_attempts} –ø–æ–ø—ã—Ç–æ–∫')
    for i in range(number_attempts):
        attempt = int(input(f'–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {number_attempts - i}\n'))
        if attempt < number:
            print('–ù–µ–¥–æ–±–æ—Ä')
        elif attempt > number:
            print('–ü–µ—Ä–µ–±–æ—Ä')
        else:
            print(f'–£–≥–∞–¥–∞–ª —Å {i + 1} –ø–æ–ø—ã—Ç–∫–∏')
            break
    else:
        print(f'–ù–µ —É–≥–∞–¥–∞–ª. –ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ: {number}')


if __name__ == '__main__':
    try_guess(100, 10)